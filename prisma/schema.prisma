generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  username      String  @unique
  email         String  @unique
  emailVerified Boolean @default(false)
  role          String  @default("unassigned role")
  accountStatus String  @default("inactive")
  passwordHash  String?
  image         String?
  // totpKey          Bytes?
  // twoFactorEnabled Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions                 Session[]
  emailVerificationRequest EmailVerificationRequest?
  passwordResetTokens      PasswordResetToken[]

  saleReports    SaleReport[]
  individualTips IndividualTip[]
}

model Session {
  id                String   @id @map("_id") @db.String
  userId            String   @db.ObjectId
  expiresAt         DateTime
  twoFactorVerified Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerificationRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  code      String
  email     String
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  tokenHash String   @id @map("_id")
  userId    String   @unique @db.ObjectId
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StoreSettings {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  uniqueKey String @unique @default("store")

  mondayShift    Float
  tuesdayShift   Float
  wednesdayShift Float
  thursdayShift  Float
  fridayShift    Float
  saturdayShift  Float
  sundayShift    Float

  startCash Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SaleReport {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  date               DateTime
  totalSales         Float
  cardSales          Float
  uberEatsSales      Float
  skipTheDishesSales Float
  doorDashSales      Float
  onlineSales        Float
  expenses           Float
  expensesReason     String?
  cardTips           Float
  cashTips           Float
  extraTips          Float
  cashInTill         Float
  startCash          Float
  fullDayHours       Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String @db.ObjectId
  reporter User   @relation(fields: [userId], references: [id], onDelete: Restrict)

  individualTips IndividualTip[]
}

model IndividualTip {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  amount       Float
  hours        Float
  date         DateTime
  userId       String   @db.ObjectId
  saleReportId String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Restrict)
  saleReport SaleReport @relation(fields: [saleReportId], references: [id], onDelete: Cascade)
}
